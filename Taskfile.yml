version: '3'

vars:
  PROJECT_NAME: registration-api
  APP_PORT: 4010
  DOCKER_IMAGE: express-microservice
  DOCKER_TAG: latest

tasks:
  default:
    desc: Show all available tasks (default)
    cmds:
      - task --list

  dev:
    desc: Start development environment
    cmds:
      - echo "Starting development environment..."
      - docker-compose up --build

  dev-detached:
    desc: Start development environment in background
    cmds:
      - echo "Starting development environment in background..."
      - docker-compose up --build -d

  dev-stop:
    desc: Stop development environment
    cmds:
      - echo "Stopping development environment..."
      - docker-compose down

  dev-restart:
    desc: Restart development environment
    cmds:
      - task: dev-stop
      - task: dev

  build:
    desc: Build production Docker image
    cmds:
      - echo "Building production image..."
      - docker build --target production -t {{.DOCKER_IMAGE}}:{{.DOCKER_TAG}} .

  build-dev:
    desc: Build development Docker image
    cmds:
      - echo "Building development image..."
      - docker build --target builder -t {{.DOCKER_IMAGE}}:dev .

  run-prod:
    desc: Run production container
    cmds:
      - echo "Starting production container..."
      - docker run -d --name {{.PROJECT_NAME}}-prod -p {{.APP_PORT}}:{{.APP_PORT}} --env-file .env {{.DOCKER_IMAGE}}:{{.DOCKER_TAG}}

  db-start:
    desc: Start database services
    cmds:
      - echo "Starting database services..."
      - docker-compose up -d postgres mongo redis

  db-stop:
    desc: Stop database services
    cmds:
      - echo "Stopping database services..."
      - docker-compose stop postgres mongo redis

  db-reset:
    desc: 'Reset all databases - WARNING: This will delete all data'
    cmds:
      - echo "WARNING This will delete all database data"
      - echo "Removing database volumes..."
      - docker-compose down -v
      - echo "Starting fresh databases..."
      - docker-compose up -d postgres mongo redis
      - echo "Waiting for databases to be ready..."
      - sleep 10
      - echo "Databases reset and ready"

  logs:
    desc: Show logs for all services
    cmds:
      - docker-compose logs -f

  logs-app:
    desc: Show application logs
    cmds:
      - docker-compose logs -f app

  logs-db:
    desc: Show database logs
    cmds:
      - docker-compose logs -f postgres mongo redis

  status:
    desc: Show container status
    cmds:
      - echo "Container Status:"
      - docker-compose ps

  shell:
    desc: Open shell in running application container
    cmds:
      - docker-compose exec app sh

  shell-db:
    desc: Open shell in PostgreSQL container
    cmds:
      - docker-compose exec postgres psql -U postgres -d express_template

  shell-mongo:
    desc: Open shell in MongoDB container
    cmds:
      - docker-compose exec mongo mongosh

  shell-redis:
    desc: Open shell in Redis container
    cmds:
      - docker-compose exec redis redis-cli

  clean:
    desc: Clean up Docker resources
    cmds:
      - echo "Cleaning up Docker resources..."
      - docker-compose down
      - docker system prune -f

  clean-all:
    desc: 'Clean up all Docker resources - WARNING: This will remove all unused images, containers, and volumes'
    cmds:
      - echo "WARNING This will remove all unused Docker resources"
      - echo "Cleaning up all Docker resources..."
      - docker-compose down -v --rmi all
      - docker system prune -a -f --volumes

  health:
    desc: Check application health
    cmds:
      - echo "Checking application health..."
      - curl -f http://localhost:{{.APP_PORT}}/ || echo "Application not responding"
      - echo "Checking comprehensive health..."
      - curl -f http://localhost:{{.APP_PORT}}/api/v1/health || echo "Health endpoint not responding"

  health-db:
    desc: Check database health
    cmds:
      - echo "Checking PostgreSQL..."
      - docker-compose exec -T postgres pg_isready -U postgres || echo "PostgreSQL not ready"
      - echo "Checking MongoDB..."
      - docker-compose exec -T mongo mongosh --eval "db.adminCommand('ping')" --quiet || echo "MongoDB not ready"
      - echo "Checking Redis..."
      - docker-compose exec -T redis redis-cli ping || echo "Redis not ready"

  monitor:
    desc: Monitor resource usage
    cmds:
      - echo "Monitoring resource usage..."
      - docker stats --no-stream

  monitor-live:
    desc: Monitor resource usage live
    cmds:
      - echo "Live resource monitoring (Ctrl+C to stop)..."
      - docker stats

  backup-db:
    desc: Backup database data
    cmds:
      - echo "Creating database backup..."
      - mkdir -p backups/$(date +%Y%m%d_%H%M%S)
      - echo "Backing up PostgreSQL..."
      - docker-compose exec -T postgres pg_dump -U postgres express_template > backups/$(date +%Y%m%d_%H%M%S)/postgres_backup.sql
      - echo "Backing up MongoDB..."
      - docker-compose exec -T mongo mongodump --db express_template --archive > backups/$(date +%Y%m%d_%H%M%S)/mongo_backup.archive
      - echo "Backup complete in backups/$(date +%Y%m%d_%H%M%S)/"

  test-e2e:
    desc: Run E2E tests in Docker
    cmds:
      - echo "Running E2E tests..."
      - docker-compose run --rm playwright-tests npm run test:e2e

  test-e2e-report:
    desc: Show E2E test report
    cmds:
      - echo "Opening E2E test report..."
      - docker-compose run --rm playwright-tests npm run test:e2e:report

  test-e2e-build:
    desc: Build E2E testing container
    cmds:
      - echo "Building E2E testing container..."
      - docker-compose build playwright-tests

  dev-workflow:
    desc: Complete development workflow (build, start, test)
    cmds:
      - echo "Starting development workflow..."
      - task: build-dev
      - task: dev
      - echo "Waiting for services to be ready..."
      - sleep 15
      - task: health
      - echo "Development workflow complete"

  deploy:
    desc: Deploy to production
    cmds:
      - echo "Deploying to production..."
      - task: build
      - task: run-prod
      - echo "Waiting for deployment to be ready..."
      - sleep 10
      - task: health
      - echo "Production deployment complete"

  help:
    desc: Show available tasks
    cmds:
      - echo "Available Docker tasks:"
      - echo ""
      - echo "Development:"
      - echo "  dev          - Start development environment"
      - echo "  dev-detached - Start development environment in background"
      - echo "  dev-stop     - Stop development environment"
      - echo "  dev-restart  - Restart development environment"
      - echo ""
      - echo "Building:"
      - echo "  build        - Build production image"
      - echo "  build-dev    - Build development image"
      - echo "  run-prod     - Run production container"
      - echo ""
      - echo "Database:"
      - echo "  db-start     - Start database services"
      - echo "  db-stop      - Stop database services"
      - echo "  db-reset     - Reset all databases - WARNING destructive"
      - echo ""
      - echo "Testing:"
      - echo "  test-e2e     - Run E2E tests"
      - echo "  test-e2e-report - Show E2E test report"
      - echo "  test-e2e-build - Build E2E testing container"
      - echo ""
      - echo "Monitoring:"
      - echo "  status       - Show container status"
      - echo "  health       - Check application health"
      - echo "  health-db    - Check database health"
      - echo "  monitor      - Monitor resource usage"
      - echo "  monitor-live - Live resource monitoring"
      - echo ""
      - echo "Maintenance:"
      - echo "  clean        - Clean up Docker resources"
      - echo "  clean-all    - Complete cleanup - WARNING destructive"
      - echo "  backup-db    - Backup database data"
      - echo ""
      - echo "Utilities:"
      - echo "  logs         - Show logs for all services"
      - echo "  logs-app     - Show application logs"
      - echo "  logs-db      - Show database logs"
      - echo "  shell        - Open shell in application container"
      - echo "  shell-db     - Open shell in PostgreSQL container"
      - echo "  shell-mongo  - Open shell in MongoDB container"
      - echo "  shell-redis  - Open shell in Redis container"
      - echo ""
      - echo "Workflows:"
      - echo "  dev-workflow - Complete development workflow"
      - echo "  deploy       - Deploy to production"
      - echo ""
      - echo "Use 'task <task-name>' to run a task"
      - echo "Use 'task --list' to see all available tasks"
